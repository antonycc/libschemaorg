import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

// libschemaorg is a Java library built from the Schema.org OWL file.
// Copyright (C) 2022  Antony Cartwright, Polycode Limited
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// Mozilla Public License, v. 2.0 for more details.

// Property which, if true, runs reports too expensive or distracting from the daily build and fails on error.
// Override with: gradle build -PsafeBuildMode=false
val safeBuildMode: String by project
var detektIgnoreFailuresValue: Boolean
var koverEnableAllReports: Boolean
if ( "safeBuildMode" in project.properties && "false" == project.properties["safeBuildMode"] ) {
    logger.info("Build is in non-SAFE mode with safeBuildMode: ${project.properties["safeBuildMode"]}")
    detektIgnoreFailuresValue = false
    koverEnableAllReports = true
}else{
    logger.info("Build is in SAFE mode with safeBuildMode: ${project.properties["safeBuildMode"]}")
    detektIgnoreFailuresValue = true
    koverEnableAllReports = false
}
logger.info("Gradle logging is outputting at INFO.")
logger.debug("Gradle logging is outputting at DEBUG.")

plugins {
    `kotlin-dsl`
    id("io.gitlab.arturbosch.detekt").version("1.20.0")
    id("org.jetbrains.kotlinx.kover").version("0.5.1")
    //kotlin("jvm").version("1.6.21")
    id("org.jetbrains.kotlin.jvm") version "1.7.0-RC2" // "1.5.31" // "1.6.21"
}

afterEvaluate {
    tasks.withType<KotlinCompile>().configureEach {
        kotlinOptions {
            apiVersion = "1.6"
            languageVersion = "1.6"
        }
    }
}

group = "co.uk.polycode"
version = "0.0.1-SNAPSHOT"

java {
    //sourceCompatibility = "18"
    //targetCompatibility = "18"
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

// Check: gradle -q dependencies --configuration compileClasspath
dependencies {

    // All logging via SLF4J
    implementation("org.slf4j:slf4j-api:1.7.25")
    implementation("io.github.microutils:kotlin-logging-jvm:2.1.20"){
        exclude("org.jetbrains.kotlin")
        exclude("org.slf4j")
    }

    // OWL to Java
    implementation("co.uk.polycode:owl-to-java:0.0.1-SNAPSHOT")
                    //co/uk/polycode/owl-to-java/0.0.1-SNAPSHOT/owl-to-java-0.0.1-SNAPSHOT
    // Testing
    testImplementation(kotlin("test"))

    // Static analysis
    implementation("io.gitlab.arturbosch.detekt:detekt-gradle-plugin:1.20.0")
}

//tasks {
//
//    // Regenerate Java classes for schema.org using the OWL schema
//    val regenerate by registering(RegenerateOntologyTask::class) {
//        outputs.upToDateWhen { false }
//        // TODO: Build a path in a POSIX style string interpolation and build for current platform
//        //e.g. val srcMain = Paths.get("projectDir/src/main").absolutePath()
//        val srcMain = "".plus(projectDir).plus(File.separator).plus("src").plus(File.separator).plus("main")
//        //val sourceFileName = "schemaorg-minimal-person.owl"
//        val sourceFileName = "schemaorg.owl"
//        lang = "en"
//        src = srcMain.plus(File.separator).plus("resources").plus(File.separator).plus(sourceFileName)
//        //dest = "INFO"
//        dest = "".plus(buildDir).plus(File.separator).plus("generated-src")
//        javaBasePackage = "com.default"
//        licenceText = """
//            This file was generated by OWL to Java as a transformation of the Schema.org schema Version 14.0.
//            Schema.org is released under the Creative Commons Attribution-ShareAlike License (version 3.0). 
//            The Schema.org license is applicable to the generated source files and the license is available from 
//            https://creativecommons.org/licenses/by-sa/3.0/
//            """
//        classes = listOf(
//            "http://schema.org/Person",
//            "http://schema.org/City",
//            "http://schema.org/CorporationX",
//            "http://schema.org/Project",
//            "http://schema.org/Book",
//            "http://schema.org/Article",
//            "http://schema.org/Fake"
//        )
//        primativePropertyTypes = mapOf(
//            "http://schema.org/DataType" to Object::class.java.name,
//            "http://schema.org/Text"     to String::class.java.name,
//            "http://schema.org/Time"     to ZonedDateTime::class.java.name,
//            "http://schema.org/DateTime" to ZonedDateTime::class.java.name,
//            "http://schema.org/Date"     to ZonedDateTime::class.java.name,
//            "http://schema.org/URL"      to URL::class.java.name,
//            "http://schema.org/Integer"  to BigInteger::class.java.name,
//            "http://schema.org/Float"    to BigDecimal::class.java.name,
//            "http://schema.org/Number"   to BigDecimal::class.java.name,
//            "http://schema.org/Boolean"  to "java.lang.Boolean", // Boolean::class.java.name, unboxes to boolean.
//        )
//        ignoredPropertyTypes = listOf(
//            "http://schema.org/Role"
//        )
//        prunedPropertyTypes = listOf(
//            "http://schema.org/Text",
//            "http://schema.org/URL"
//        )
//        ignoredSuperclasses = listOf<String>(
//            "http://www.w3.org/2000/01/rdf-schema#Class"
//        )
//    }

tasks.test {
    useJUnitPlatform()
}

kover {
    isDisabled = !koverEnableAllReports
}

// See: https://detekt.dev/docs/gettingstarted/gradle/
detekt {
    config = files("$projectDir/src/test/detekt/config.yml")
    buildUponDefaultConfig = true
    baseline = file("$projectDir/src/test/detekt/baseline.xml")
    ignoreFailures = detektIgnoreFailuresValue
}

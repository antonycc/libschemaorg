import java.nio.file.Paths

// libschemaorg is a Java library built from the Schema.org OWL file.
// Copyright (C) 2022  Antony Cartwright, Polycode Limited
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// Mozilla Public License, v. 2.0 for more details.

buildscript {
    repositories {
        mavenLocal() // OWL to Java Task would be in local
        mavenCentral()
        maven {
            url = "https://maven.pkg.github.com/antonycc/owl-to-java"
            //credentials {
            //    username = System.getenv("GITHUB_ACTOR")
            //    password = System.getenv("GITHUB_TOKEN")
            //}
        }
    }
    dependencies {
        classpath 'co.uk.polycode:owl-to-java:0.0.9-SNAPSHOT'
    }
}

repositories {
    mavenCentral()
}

// Override default library Task with:
//    ./gradlew regenerate -PuseIncludedBuild=regenerate-lib-with-groovy
tasks.register("regenerate", uk.co.polycode.owltojava.RegenerateOntologyTask) { //regenerateTask ->
    // Configure regenerateTask
    regenerate.outputs.upToDateWhen {false}
    def srcMain = Paths.get(projectDir.absolutePath + "/../src/main").toFile().absolutePath
    def sourceFileName = "schemaorg.owl"
    regenerate.lang = "en"
    regenerate.src = Paths.get(srcMain + "/resources/" + sourceFileName).toFile()
    regenerate.dest = Paths.get(projectDir.absolutePath + "/../build/generated-src-with-groovy").toFile()
    regenerate.javaBasePackage = "uk.co.polycode.ontology.with-groovy"
}

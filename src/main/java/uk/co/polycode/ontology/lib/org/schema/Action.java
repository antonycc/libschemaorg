package uk.co.polycode.ontology.lib.org.schema;

import java.lang.String;
import java.time.ZonedDateTime;

/**
 * Action
 *
 * An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.<br/><br/>
 *
 * See also <a href="http://blog.schema.org/2014/04/announcing-schemaorg-actions.html">blog post</a> and <a href="https://schema.org/docs/actions.html">Actions overview document</a>.
 *
 *
 *             This file was generated by OWL to Java as a transformation of the Schema.org schema Version 14.0.
 *             Schema.org is released under the Creative Commons Attribution-ShareAlike License (version 3.0). 
 *             The Schema.org license is applicable to the generated source files and the license is available from 
 *             https://creativecommons.org/licenses/by-sa/3.0/
 *             
 */
public class Action extends Thing {
  /**
   * Where to find the definition of the OWL Class used to generate this Java class.
   */
  public String isDefinedBy = "https://schema.org/Action";

  /**
   * Indicates the current disposition of the Action.
   */
  public ActionStatusType actionStatus;

  /**
   * The direct performer or driver of the action (animate or inanimate). e.g. <em>John</em> wrote a book.
   */
  public Person agent;

  /**
   * The direct performer or driver of the action (animate or inanimate). e.g. <em>John</em> wrote a book.
   */
  public Organization agentOrganization;

  /**
   * For failed actions, more information on the cause of the failure.
   */
  public Thing error;

  /**
   * The object that helped the agent perform the action. e.g. John wrote a book with <em>a pen</em>.
   */
  public Thing instrument;

  /**
   * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
   */
  public PostalAddress location;

  /**
   * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
   */
  public Place locationPlace;

  /**
   * The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
   */
  public VirtualLocation locationVirtualLocation;

  /**
   * The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read <em>a book</em>.
   */
  public Thing object;

  /**
   * Other co-agents that participated in the action indirectly. e.g. John wrote a book with <em>Steve</em>.
   */
  public Person participant;

  /**
   * Other co-agents that participated in the action indirectly. e.g. John wrote a book with <em>Steve</em>.
   */
  public Organization participantOrganization;

  /**
   * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
   */
  public Person provider;

  /**
   * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
   */
  public Organization providerOrganization;

  /**
   * The result produced in the action. e.g. John wrote <em>a book</em>.
   */
  public Thing result;

  /**
   * Indicates a target EntryPoint for an Action.
   */
  public EntryPoint target;

  /**
   * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>
   *
   * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   */
  public ZonedDateTime endTime;

  /**
   * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to <em>December</em>. For media, including audio and video, it's the time offset of the end of a clip within a larger file.<br/><br/>
   *
   * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   */
  public ZonedDateTime endTimeZonedDateTime;

  /**
   * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>
   *
   * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   */
  public ZonedDateTime startTime;

  /**
   * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from <em>January</em> to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.<br/><br/>
   *
   * Note that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   */
  public ZonedDateTime startTimeZonedDateTime;
}

